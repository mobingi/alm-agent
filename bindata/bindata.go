// Code generated by go-bindata.
// sources:
// _data/addon_containers.toml
// _data/sys_containers.toml
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __dataAddon_containersToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x8e\x4e\xce\xcf\x2b\x49\xcc\xcc\x4b\x2d\x8a\x8d\xe5\x52\x50\xc8\x4b\xcc\x4d\x55\xb0\x55\x50\xca\x4d\x4c\xce\x4e\x2d\x4a\xcd\x51\xe2\x52\x50\xc8\xcc\x4d\x4c\x47\x11\xd4\x87\x31\x74\x13\xd3\x53\xf3\x4a\xac\x72\x12\x4b\x52\x8b\x4b\x40\x4a\x53\xf3\xca\xd2\x4a\xf3\x92\x8b\x15\x6c\x15\xa2\xd5\x61\xaa\xe2\x53\xf3\xca\x8a\xd5\x41\xa6\x97\xe5\xe7\x60\x91\x2e\xcb\xcf\x51\x8f\xe5\x02\x04\x00\x00\xff\xff\x34\x0a\xe9\xaa\x8a\x00\x00\x00")

func _dataAddon_containersTomlBytes() ([]byte, error) {
	return bindataRead(
		__dataAddon_containersToml,
		"_data/addon_containers.toml",
	)
}

func _dataAddon_containersToml() (*asset, error) {
	bytes, err := _dataAddon_containersTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_data/addon_containers.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __dataSys_containersToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x4d\x0a\x02\x31\x0c\x85\xf7\x3d\xc5\x63\x36\xdd\x28\x9e\x60\x4e\x52\xca\x10\x6b\x2d\xc1\x26\x01\x53\xeb\xf5\xa5\x6e\x04\x97\xef\xe7\xfb\x52\x2a\xa6\x83\x58\xeb\x33\xe7\x00\x28\x49\xc5\x8e\x8d\xba\x9c\xe9\xed\xdd\x9a\x6f\x01\x60\xa1\xf6\xed\xc5\xae\xac\x8d\x2f\x7f\x7b\xd5\x79\x7f\x69\x71\xec\x48\xd1\x07\x95\xc7\xc1\xb7\x78\x42\x64\xf5\x41\x5a\xea\x8a\xcb\x3f\xad\xff\x8e\x8b\x3e\xa6\xf5\x98\xc3\x27\x00\x00\xff\xff\x46\x73\x16\x43\x88\x00\x00\x00")

func _dataSys_containersTomlBytes() ([]byte, error) {
	return bindataRead(
		__dataSys_containersToml,
		"_data/sys_containers.toml",
	)
}

func _dataSys_containersToml() (*asset, error) {
	bytes, err := _dataSys_containersTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_data/sys_containers.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_data/addon_containers.toml": _dataAddon_containersToml,
	"_data/sys_containers.toml": _dataSys_containersToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"_data": &bintree{nil, map[string]*bintree{
		"addon_containers.toml": &bintree{_dataAddon_containersToml, map[string]*bintree{}},
		"sys_containers.toml": &bintree{_dataSys_containersToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

